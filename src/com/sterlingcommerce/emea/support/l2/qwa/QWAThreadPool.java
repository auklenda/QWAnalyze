/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sterlingcommerce.emea.support.l2.qwa;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
/**
 *
 * @author Alf Auklend
 */
public class QWAThreadPool extends javax.swing.JDialog {
    static String columnNames[] = { " ", "Queue 1", "Queue 2","Queue 3","Queue 4","Queue 5","Queue 6","Queue 7","Queue 8","Queue 9" };
    static int MaxThreads = -1;
    static int [][] threadPools = new int [11][9];
    static String [][] ThreadPools = new String [17][10];
            
/**
     * Creates n form QWAThreadPool
     */
    public QWAThreadPool(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        createJtable();
    }

    public QWAThreadPool() {
    }
    
    /**
     * Handle the CFG token on logline
     * Called from QWAnalyzer at start up it populates the q pool cfg aray
     * @param str 
     */
    public void createQTable(String str) {
     ArrayList al = QWUtil.tokenize(str," ");
     String tmp = (String)al.get(4);
     columnNames[0] = tmp;
     int inx = tmp.indexOf("=");
     try{
        MaxThreads = Integer.parseInt(tmp.substring(inx+1));
        for (int i = 0; i < 16; i++) {
            String qItem = (String)al.get(i+5);
            ArrayList qiAl = QWUtil.tokenize(qItem,";");
            for (int j = 0; j < 10; j++) {
                ThreadPools[i][j] = (String)qiAl.get(j);
            }
        }
      } catch(Exception  exp) {
        exp.printStackTrace();    
      }
      createFairShareTable();
    }
    /**
     * Set up MinSize,MaxSze,Resource
     */
    public void createFairShareTable() {
      createIntArray(ThreadPools,3,1,QWAFairShareCalc.FairShareFeed,0,0);
      createIntArray(ThreadPools,5,1,QWAFairShareCalc.FairShareFeed,1,0);  
      createIntArray(ThreadPools,11,1,QWAFairShareCalc.FairShareFeed,2,0);
        
    }
     private void createIntArray(String [][] iPool, int iRow, int iCol, int [][] oPool, int oRow, int oCol) {
       try {
           for (int i = 0; i < 9; i++) {
              oPool[oRow][oCol + i] = Integer.parseInt(iPool[iRow][iCol + i]);
           }
       } catch (Exception exp) {
          exp.printStackTrace(); 
       }
         String tmp = iPool[iRow][iCol];
    }
   
    /**
     * createPoolThread table
     * Display the active configuration of the Queue PooolThreads.
     */
    public void createJtable(){
       if (MaxThreads == -1)
           return;
       javax.swing.JTable jt = new javax.swing.JTable(ThreadPools,columnNames); 
       JScrollPane scrollPane = new JScrollPane(jt);
       setSize(900,350);
       scrollPane.setSize(900, 350);
       int wth = scrollPane.getWidth() - 10;
       int col0 = 140;
       int col1to9 = (wth-100)/9;
       jt.getColumnModel().getColumn(0).setPreferredWidth(col0);
       for (int i = 0; i < 9; i++) {
            jt.getColumnModel().getColumn(i+1).setPreferredWidth(col1to9);
       }
       add(scrollPane);
       setVisible(true);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                QWAThreadPool dialog = new QWAThreadPool(new java.awt.Frame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
